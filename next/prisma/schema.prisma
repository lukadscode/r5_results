generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(PROF)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  etablissementId String?
  etablissement    Etablissement? @relation(fields: [etablissementId], references: [id])
}

enum Role {
  ADMIN
  ETABLISSEMENT
  PROF
  ELEVE
}

model Etablissement {
  id        String   @id @default(cuid())
  name      String
  classes   Classe[]
  users     User[]
  createdAt DateTime @default(now())
}

model Classe {
  id              String   @id @default(cuid())
  name            String
  etablissementId String
  etablissement   Etablissement @relation(fields: [etablissementId], references: [id])
  eleves          Eleve[]
  createdAt       DateTime @default(now())
}

model Eleve {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  classeId  String
  classe    Classe   @relation(fields: [classeId], references: [id])
  results   Result[]
}

model Result {
  id              String   @id @default(cuid())
  eleveId         String
  eleve           Eleve    @relation(fields: [eleveId], references: [id])
  score           Int
  timeSeconds     Float
  details         Json?
  externalEventId String   @unique
  gameId          String
  createdAt       DateTime @default(now())
}

model PadletCategory {
  id        String   @id @default(cuid())
  name      String
  articles  PadletArticle[]
}

model PadletArticle {
  id         String   @id @default(cuid())
  title      String
  content    String
  status     ArticleStatus @default(DRAFT)
  categoryId String
  category   PadletCategory @relation(fields: [categoryId], references: [id])
  createdBy  String
  createdAt  DateTime @default(now())
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
}


